import { ObjectId } from "mongodb";
import { connectToDatabase } from "@/infrastructure/db/mongodb";
import { CreateUserDtoType, UpdateUserDtoType } from "@/application/schemas/user.schema";
import { DbUser } from "./db.types";

const COLLECTION_NAME = "users";

// Database representation of a user

// Helper to convert string to ObjectId
function toObjectId(id: string): ObjectId {
  if (!ObjectId.isValid(id)) throw new Error("Invalid user ID");
  return new ObjectId(id);
}

// Fetch all users
export async function fetchUsersFromDb(): Promise<DbUser[]> {
  const db = await connectToDatabase();
  return db.collection<DbUser>(COLLECTION_NAME).find({}).toArray();
}

// Find user by ID
export async function findUserByIdInDb(userId: string): Promise<DbUser | null> {
  const db = await connectToDatabase();
  return db.collection<DbUser>(COLLECTION_NAME).findOne({ _id: toObjectId(userId) });
}

// Update user by ID (find → update → fetch pattern)
export async function updateUserInDb(userId: string, update: UpdateUserDtoType): Promise<DbUser> {
  const db = await connectToDatabase();

  // Find user
  const existingUser = await db.collection<DbUser>(COLLECTION_NAME).findOne({ _id: toObjectId(userId) });
  if (!existingUser) throw new Error("User not found");

  // Update fields
  await db.collection<DbUser>(COLLECTION_NAME).updateOne({ _id: existingUser._id }, { $set: update });

  // Fetch updated user
  const updatedUser = await db.collection<DbUser>(COLLECTION_NAME).findOne({ _id: existingUser._id });
  if (!updatedUser) throw new Error("Failed to fetch updated user");

  return updatedUser;
}

// Find user by phone number
export async function findUserByPhoneInDb(phoneNumber: string): Promise<DbUser | null> {
  const db = await connectToDatabase();
  return db.collection<DbUser>(COLLECTION_NAME).findOne({ phoneNumber });
}

// Insert a new user
export async function insertUserToDb(user: CreateUserDtoType): Promise<DbUser> {
  const db = await connectToDatabase();

  // Insert as a Partial<DbUser> — _id is generated by MongoDB
  const result = await db.collection<Partial<DbUser>>(COLLECTION_NAME).insertOne(user);

  // Fetch the inserted document with the generated _id
  const insertedUser = await db.collection<DbUser>(COLLECTION_NAME).findOne({ _id: result.insertedId });
  if (!insertedUser) throw new Error("Failed to insert user");

  return insertedUser;
}

// Delete user by ID
export async function deleteUserFromDb(userId: string): Promise<boolean> {
  const db = await connectToDatabase();
  const result = await db.collection<DbUser>(COLLECTION_NAME).deleteOne({ _id: toObjectId(userId) });
  if (result.deletedCount === 0) throw new Error("User not found or already deleted");
  return true;
}
